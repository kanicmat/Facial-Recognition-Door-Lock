package eecs1021;


import org.opencv.core.Core;
import org.firmata4j.Pin;
import org.firmata4j.firmata.FirmataDevice;


import javax.swing.*;
import java.io.IOException;
import java.io.InterruptedIOException;
import java.util.Timer;
import java.util.TimerTask;


public class automatDoor {
   static final int D3 = 3; // servo sensor that controls the doors lock
   static final int D4= 4;// led light pin


   public static void main(String[] args) throws InterruptedIOException, IOException {
       try {


           System.loadLibrary(Core.NATIVE_LIBRARY_NAME);


           var device = new FirmataDevice("COM9");
           device.start();
           device.ensureInitializationIsDone();


           // Setting up pins
           Pin led = device.getPin(D4);
           led.setMode(Pin.Mode.OUTPUT);




           Pin servoPin2 = device.getPin(D3);
           servoPin2.setMode(Pin.Mode.SERVO);


           InitiateGraph initiateGraph = new InitiateGraph();


           // Create a timer task for opening the door
           TimerTask openDoorTask = new OpenDoorTask(led, servoPin2, initiateGraph);
           // Start a timer
           Timer timer = new Timer();
           timer.schedule(openDoorTask, 0, 1000);


           // Create a JFrame to hold the chart panel
           JFrame frame = new JFrame("Soil Moisture Monitoring");
           frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
           frame.getContentPane().add(initiateGraph.getChartPanel()); // Add the chart panel to the frame
           frame.pack();
           frame.setVisible(true);


       } catch (IOException | InterruptedException e) {
           e.printStackTrace();
       }
   }
}






package eecs1021;


import org.opencv.core.Mat;
import org.opencv.core.MatOfRect;
import org.opencv.objdetect.CascadeClassifier;
import org.opencv.videoio.VideoCapture;
import org.firmata4j.Pin;
import java.util.ArrayList;
import java.io.IOException;
import java.util.TimerTask;
import java.util.Timer;




public class OpenDoorTask extends TimerTask {
   private final Pin led;
   private final Pin servoPin2;
   private final InitiateGraph initiateGraph;
   private boolean doorLocked = true;


   private static final int DOOR_LOCKED_ANGLE = 90;
   private static final int DOOR_UNLOCKED_ANGLE = 180;


   private ArrayList<Integer> convertedAngles = new ArrayList<>();


   public OpenDoorTask(Pin led, Pin servoPin2, InitiateGraph initiateGraph) {
       this.led = led;
       this.servoPin2 = servoPin2;
       this.initiateGraph = initiateGraph;
   }


   @Override
   public void run() {
       // Initialize video capture device
       VideoCapture capture = new VideoCapture(0);


       // Load cascade classifier for face detection
       CascadeClassifier faceCascade = new CascadeClassifier();
       faceCascade.load("src/eecs1021/haarcascade_frontalface_default.xml");


       Mat frame = new Mat();
       capture.read(frame);


       // Detect faces
       MatOfRect faces = new MatOfRect();
       faceCascade.detectMultiScale(frame, faces);


       try {
           if (!faces.empty() && doorLocked) {
               doorLocked = false;
               servoPin2.setValue(DOOR_UNLOCKED_ANGLE); // Unlock door
               led.setValue(1); // Turn on LED
               System.out.println("Door Unlocked");




           } else if (faces.empty() && !doorLocked) {
               doorLocked = true;
               servoPin2.setValue(DOOR_LOCKED_ANGLE); // Lock door
               led.setValue(0); // Turn off LED
               System.out.println("Door Locked");
           }
       } catch (IOException e) {
           e.printStackTrace();
       }


       // Get the current angle of the servo motor
       long currentAngleLong = servoPin2.getValue();


// Convert the angle to 0 or 1 (cast the long value to int)
       int currentAngle = (int) currentAngleLong;


       // Convert the angle to 0 or 1
       int convertedAngle = convertAngle(currentAngle);


       convertedAngles.add(convertedAngle);


       initiateGraph.updateGraph(convertedAngles);


       // Release video capture and clear faces
       capture.release();
       faces.release();
   }
   private int convertAngle(int angle) {
       if (angle == DOOR_UNLOCKED_ANGLE) {
           return 1; // door unlocked
       } else if (angle == DOOR_LOCKED_ANGLE) {
           return 0; // door locked
       } else {
           return -1; // handle other cases if needed
       }
   }




}




package eecs1021;


import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;


import javax.swing.*;
import java.awt.*;
import java.util.ArrayList;


public class InitiateGraph {
   private final XYSeries sensorSeries;
   private final XYSeriesCollection dataset;
   private final JFreeChart chart;
   private final ChartPanel chartPanel;


   public InitiateGraph() {
       // Initialize the series for the sensor value vs. time graph
       sensorSeries = new XYSeries("Rotary Sensor Value vs. Time");


       // Add the series to the dataset
       dataset = new XYSeriesCollection();
       dataset.addSeries(sensorSeries);


       // Create the chart
       chart = ChartFactory.createXYLineChart(
               "Rotary Sensor Value vs. Time", // Chart title
               "Time", // X-Axis label
               "Rotary Sensor Value", // Y-Axis label
               dataset // Dataset
       );


       // Customize chart appearance if necessary
       chart.setBackgroundPaint(Color.white);


       // Customize the range of the y-axis to always show 0-1
       XYPlot plot = (XYPlot) chart.getPlot();
       plot.getRangeAxis().setRange(0, 1);


       // Make the points distinct using shapes
       XYLineAndShapeRenderer renderer = new XYLineAndShapeRenderer();
       renderer.setSeriesShapesVisible(0, true); // Show shapes for series 0 (sensor value vs. time)
       plot.setRenderer(renderer);


       // Create and customize the chart panel
       chartPanel = new ChartPanel(chart);
       chartPanel.setPreferredSize(new Dimension(800, 600));
   }


   public void updateGraph(ArrayList<Integer> convertedValues) {
       // Clear existing data from the series
       sensorSeries.clear();


       // Add the new converted values to the series
       for (int i = 0; i < convertedValues.size(); i++) {
           sensorSeries.add(i, convertedValues.get(i));
       }
   }


   public JPanel getChartPanel() {
       return chartPanel;
   }
}




package eecs1021;


import org.junit.Test;
import static org.junit.Assert.assertEquals;


public class OpenDoorTaskTest {


   private static final int DOOR_LOCKED_ANGLE = 90;
   private static final int DOOR_UNLOCKED_ANGLE = 180;


   @Test
   public void testConvertAngle_LockedDoor() {
       // Test when the door is locked (angle = 90)
       int angleLocked = 90;
       int expectedResultLocked = 0; // Expecting 0 when the door is locked
       assertEquals("Error: Incorrect conversion when the door is locked.", expectedResultLocked, convertAngle(angleLocked));
   }


   @Test
   public void testConvertAngle_UnlockedDoor() {
       // Test when the door is unlocked (angle = 180)
       int angleUnlocked = 180;
       int expectedResultUnlocked = 1; // Expecting 1 when the door is unlocked
       assertEquals("Error: Incorrect conversion when the door is unlocked.", expectedResultUnlocked, convertAngle(angleUnlocked));
   }


   @Test
   public void testConvertAngle_OutOfRange() {
       // Test when the angle is out of range (e.g., negative angle)
       int angleOutOfRange = -10;
       int expectedResultOutOfRange = -1; // Expecting -1 for out-of-range angles
       assertEquals("Error: Incorrect conversion for out-of-range angle.", expectedResultOutOfRange, convertAngle(angleOutOfRange));
   }


   private int convertAngle(int angle) {
       final int DOOR_LOCKED_ANGLE = 90;
       final int DOOR_UNLOCKED_ANGLE = 180;
       int convertedValue;


       if (angle < 0 || angle > 180) {
           convertedValue = -1; // Handle out-of-range angles
       } else if (angle == DOOR_LOCKED_ANGLE) {
           convertedValue = 0; // Convert locked door angle to 0
       } else if (angle == DOOR_UNLOCKED_ANGLE) {
           convertedValue = 1; // Convert unlocked door angle to 1
       } else {
           convertedValue = -1; // Handle other cases
       }
       return convertedValue;
   }
}